{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = camelCase;\n\nvar _hyphenateStyleName = require('hyphenate-style-name');\n\nvar _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\n\n\nfunction convertCase(style) {\n  var converted = {};\n\n  for (var prop in style) {\n    converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];\n  }\n\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\n  }\n\n  return converted;\n}\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\n\n\nfunction camelCase() {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (var index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index]);\n      }\n\n      return style;\n    }\n\n    return convertCase(style);\n  }\n\n  function onChangeValue(value, prop, rule) {\n    var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop); // There was no camel case in place\n\n    if (prop === hyphenatedProp) return value;\n    rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.\n\n    return null;\n  }\n\n  return {\n    onProcessStyle: onProcessStyle,\n    onChangeValue: onChangeValue\n  };\n}","map":{"version":3,"sources":["C:/Users/medic/Desktop/CodingBootCamp/Homework/Monnaie/client/node_modules/jss-camel-case/lib/index.js"],"names":["Object","defineProperty","exports","value","camelCase","_hyphenateStyleName","require","_hyphenateStyleName2","_interopRequireDefault","obj","__esModule","convertCase","style","converted","prop","fallbacks","Array","isArray","map","onProcessStyle","index","length","onChangeValue","rule","hyphenatedProp"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAAC,SAAD,CAAP,GAAqBE,SAArB;;AAEA,IAAIC,mBAAmB,GAAGC,OAAO,CAAC,sBAAD,CAAjC;;AAEA,IAAIC,oBAAoB,GAAGC,sBAAsB,CAACH,mBAAD,CAAjD;;AAEA,SAASG,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAE,eAAWA;AAAb,GAArC;AAA0D;AAEjG;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,MAAIC,SAAS,GAAG,EAAhB;;AAEA,OAAK,IAAIC,IAAT,IAAiBF,KAAjB,EAAwB;AACtBC,IAAAA,SAAS,CAAC,CAAC,GAAGN,oBAAoB,CAAC,SAAD,CAAxB,EAAqCO,IAArC,CAAD,CAAT,GAAwDF,KAAK,CAACE,IAAD,CAA7D;AACD;;AAED,MAAIF,KAAK,CAACG,SAAV,EAAqB;AACnB,QAAIC,KAAK,CAACC,OAAN,CAAcL,KAAK,CAACG,SAApB,CAAJ,EAAoCF,SAAS,CAACE,SAAV,GAAsBH,KAAK,CAACG,SAAN,CAAgBG,GAAhB,CAAoBP,WAApB,CAAtB,CAApC,KAAgGE,SAAS,CAACE,SAAV,GAAsBJ,WAAW,CAACC,KAAK,CAACG,SAAP,CAAjC;AACjG;;AAED,SAAOF,SAAP;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAAST,SAAT,GAAqB;AACnB,WAASe,cAAT,CAAwBP,KAAxB,EAA+B;AAC7B,QAAII,KAAK,CAACC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AACxB;AACA,WAAK,IAAIQ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGR,KAAK,CAACS,MAAlC,EAA0CD,KAAK,EAA/C,EAAmD;AACjDR,QAAAA,KAAK,CAACQ,KAAD,CAAL,GAAeT,WAAW,CAACC,KAAK,CAACQ,KAAD,CAAN,CAA1B;AACD;;AACD,aAAOR,KAAP;AACD;;AAED,WAAOD,WAAW,CAACC,KAAD,CAAlB;AACD;;AAED,WAASU,aAAT,CAAuBnB,KAAvB,EAA8BW,IAA9B,EAAoCS,IAApC,EAA0C;AACxC,QAAIC,cAAc,GAAG,CAAC,GAAGjB,oBAAoB,CAAC,SAAD,CAAxB,EAAqCO,IAArC,CAArB,CADwC,CAGxC;;AACA,QAAIA,IAAI,KAAKU,cAAb,EAA6B,OAAOrB,KAAP;AAE7BoB,IAAAA,IAAI,CAACT,IAAL,CAAUU,cAAV,EAA0BrB,KAA1B,EANwC,CAQxC;;AACA,WAAO,IAAP;AACD;;AAED,SAAO;AAAEgB,IAAAA,cAAc,EAAEA,cAAlB;AAAkCG,IAAAA,aAAa,EAAEA;AAAjD,GAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports['default'] = camelCase;\n\nvar _hyphenateStyleName = require('hyphenate-style-name');\n\nvar _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n/**\n * Convert camel cased property names to dash separated.\n *\n * @param {Object} style\n * @return {Object}\n */\nfunction convertCase(style) {\n  var converted = {};\n\n  for (var prop in style) {\n    converted[(0, _hyphenateStyleName2['default'])(prop)] = style[prop];\n  }\n\n  if (style.fallbacks) {\n    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);\n  }\n\n  return converted;\n}\n\n/**\n * Allow camel cased property names by converting them back to dasherized.\n *\n * @param {Rule} rule\n */\nfunction camelCase() {\n  function onProcessStyle(style) {\n    if (Array.isArray(style)) {\n      // Handle rules like @font-face, which can have multiple styles in an array\n      for (var index = 0; index < style.length; index++) {\n        style[index] = convertCase(style[index]);\n      }\n      return style;\n    }\n\n    return convertCase(style);\n  }\n\n  function onChangeValue(value, prop, rule) {\n    var hyphenatedProp = (0, _hyphenateStyleName2['default'])(prop);\n\n    // There was no camel case in place\n    if (prop === hyphenatedProp) return value;\n\n    rule.prop(hyphenatedProp, value);\n\n    // Core will ignore that property value we set the proper one above.\n    return null;\n  }\n\n  return { onProcessStyle: onProcessStyle, onChangeValue: onChangeValue };\n}"]},"metadata":{},"sourceType":"script"}